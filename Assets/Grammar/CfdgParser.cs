//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Cfdg.g4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CfdgParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, STARTSHAPE=8, 
		BACKGROUND=9, RULE=10, ROTATE=11, FLIP=12, HUE=13, SATURATION=14, BRIGHTNESS=15, 
		ALPHA=16, XSHIFT=17, YSHIFT=18, ZSHIFT=19, SIZE=20, SKEW=21, NUMBER=22, 
		NAME=23, WS=24, COMMENT=25, LINE_COMMENT=26, LINE_BANG_COMMENT=27;
	public const int
		RULE_contextfree = 0, RULE_statements = 1, RULE_statement = 2, RULE_startshape = 3, 
		RULE_background = 4, RULE_design_rule = 5, RULE_replacements = 6, RULE_replacement_loop = 7, 
		RULE_replacement = 8, RULE_modification = 9, RULE_adjustments = 10, RULE_adjustment = 11, 
		RULE_color_adjustments = 12, RULE_geom_adjustment = 13, RULE_color_adjustment = 14, 
		RULE_num = 15;
	public static readonly string[] ruleNames = {
		"contextfree", "statements", "statement", "startshape", "background", 
		"design_rule", "replacements", "replacement_loop", "replacement", "modification", 
		"adjustments", "adjustment", "color_adjustments", "geom_adjustment", "color_adjustment", 
		"num"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'*'", "'['", "']'", "'-'", "'+'", "'startshape'", 
		"'background'", "'rule'", null, null, null, null, null, null, "'x'", "'y'", 
		"'z'", null, "'skew'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, "STARTSHAPE", "BACKGROUND", 
		"RULE", "ROTATE", "FLIP", "HUE", "SATURATION", "BRIGHTNESS", "ALPHA", 
		"XSHIFT", "YSHIFT", "ZSHIFT", "SIZE", "SKEW", "NUMBER", "NAME", "WS", 
		"COMMENT", "LINE_COMMENT", "LINE_BANG_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Cfdg.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CfdgParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CfdgParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CfdgParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ContextfreeContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(CfdgParser.Eof, 0); }
		public ContextfreeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextfree; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterContextfree(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitContextfree(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitContextfree(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ContextfreeContext contextfree() {
		ContextfreeContext _localctx = new ContextfreeContext(Context, State);
		EnterRule(_localctx, 0, RULE_contextfree);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; statements(0);
			State = 33; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementsContext : ParserRuleContext {
		public StatementsContext statements() {
			return GetRuleContext<StatementsContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterStatements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitStatements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementsContext statements() {
		return statements(0);
	}

	private StatementsContext statements(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementsContext _localctx = new StatementsContext(Context, _parentState);
		StatementsContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_statements, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 40;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statements);
					State = 36;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 37; statement();
					}
					} 
				}
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public StartshapeContext startshape() {
			return GetRuleContext<StartshapeContext>(0);
		}
		public BackgroundContext background() {
			return GetRuleContext<BackgroundContext>(0);
		}
		public Design_ruleContext design_rule() {
			return GetRuleContext<Design_ruleContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_statement);
		try {
			State = 46;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STARTSHAPE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 43; startshape();
				}
				break;
			case BACKGROUND:
				EnterOuterAlt(_localctx, 2);
				{
				State = 44; background();
				}
				break;
			case RULE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 45; design_rule();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartshapeContext : ParserRuleContext {
		public ITerminalNode STARTSHAPE() { return GetToken(CfdgParser.STARTSHAPE, 0); }
		public ITerminalNode NAME() { return GetToken(CfdgParser.NAME, 0); }
		public StartshapeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startshape; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterStartshape(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitStartshape(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStartshape(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartshapeContext startshape() {
		StartshapeContext _localctx = new StartshapeContext(Context, State);
		EnterRule(_localctx, 6, RULE_startshape);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(STARTSHAPE);
			State = 49; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BackgroundContext : ParserRuleContext {
		public ITerminalNode BACKGROUND() { return GetToken(CfdgParser.BACKGROUND, 0); }
		public Color_adjustmentsContext color_adjustments() {
			return GetRuleContext<Color_adjustmentsContext>(0);
		}
		public BackgroundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_background; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterBackground(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitBackground(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBackground(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BackgroundContext background() {
		BackgroundContext _localctx = new BackgroundContext(Context, State);
		EnterRule(_localctx, 8, RULE_background);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 51; Match(BACKGROUND);
			State = 52; Match(T__0);
			State = 53; color_adjustments(0);
			State = 54; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Design_ruleContext : ParserRuleContext {
		public ITerminalNode RULE() { return GetToken(CfdgParser.RULE, 0); }
		public ITerminalNode NAME() { return GetToken(CfdgParser.NAME, 0); }
		public ReplacementsContext replacements() {
			return GetRuleContext<ReplacementsContext>(0);
		}
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public Design_ruleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_design_rule; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterDesign_rule(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitDesign_rule(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDesign_rule(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Design_ruleContext design_rule() {
		Design_ruleContext _localctx = new Design_ruleContext(Context, State);
		EnterRule(_localctx, 10, RULE_design_rule);
		try {
			State = 69;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(RULE);
				State = 57; Match(NAME);
				State = 58; Match(T__0);
				State = 59; replacements();
				State = 60; Match(T__1);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 62; Match(RULE);
				State = 63; Match(NAME);
				State = 64; num();
				State = 65; Match(T__0);
				State = 66; replacements();
				State = 67; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementsContext : ParserRuleContext {
		public Replacement_loopContext[] replacement_loop() {
			return GetRuleContexts<Replacement_loopContext>();
		}
		public Replacement_loopContext replacement_loop(int i) {
			return GetRuleContext<Replacement_loopContext>(i);
		}
		public ReplacementsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacements; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterReplacements(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitReplacements(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacements(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementsContext replacements() {
		ReplacementsContext _localctx = new ReplacementsContext(Context, State);
		EnterRule(_localctx, 12, RULE_replacements);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==NUMBER || _la==NAME) {
				{
				{
				State = 71; replacement_loop();
				}
				}
				State = 76;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Replacement_loopContext : ParserRuleContext {
		public ReplacementContext replacement() {
			return GetRuleContext<ReplacementContext>(0);
		}
		public ITerminalNode NUMBER() { return GetToken(CfdgParser.NUMBER, 0); }
		public ModificationContext modification() {
			return GetRuleContext<ModificationContext>(0);
		}
		public ReplacementsContext replacements() {
			return GetRuleContext<ReplacementsContext>(0);
		}
		public Replacement_loopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacement_loop; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterReplacement_loop(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitReplacement_loop(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacement_loop(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Replacement_loopContext replacement_loop() {
		Replacement_loopContext _localctx = new Replacement_loopContext(Context, State);
		EnterRule(_localctx, 14, RULE_replacement_loop);
		try {
			State = 90;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 77; replacement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78; Match(NUMBER);
				State = 79; Match(T__2);
				State = 80; modification();
				State = 81; replacement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 83; Match(NUMBER);
				State = 84; Match(T__2);
				State = 85; modification();
				State = 86; Match(T__0);
				State = 87; replacements();
				State = 88; Match(T__1);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacementContext : ParserRuleContext {
		public ITerminalNode NAME() { return GetToken(CfdgParser.NAME, 0); }
		public ModificationContext modification() {
			return GetRuleContext<ModificationContext>(0);
		}
		public ReplacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterReplacement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitReplacement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReplacement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReplacementContext replacement() {
		ReplacementContext _localctx = new ReplacementContext(Context, State);
		EnterRule(_localctx, 16, RULE_replacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 92; Match(NAME);
			State = 93; modification();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModificationContext : ParserRuleContext {
		public AdjustmentsContext adjustments() {
			return GetRuleContext<AdjustmentsContext>(0);
		}
		public ModificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modification; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterModification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitModification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModificationContext modification() {
		ModificationContext _localctx = new ModificationContext(Context, State);
		EnterRule(_localctx, 18, RULE_modification);
		try {
			State = 103;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; Match(T__0);
				State = 96; adjustments();
				State = 97; Match(T__1);
				}
				break;
			case T__3:
				EnterOuterAlt(_localctx, 2);
				{
				State = 99; Match(T__3);
				State = 100; adjustments();
				State = 101; Match(T__4);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdjustmentsContext : ParserRuleContext {
		public AdjustmentContext[] adjustment() {
			return GetRuleContexts<AdjustmentContext>();
		}
		public AdjustmentContext adjustment(int i) {
			return GetRuleContext<AdjustmentContext>(i);
		}
		public AdjustmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adjustments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterAdjustments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitAdjustments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdjustments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdjustmentsContext adjustments() {
		AdjustmentsContext _localctx = new AdjustmentsContext(Context, State);
		EnterRule(_localctx, 20, RULE_adjustments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 108;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ROTATE) | (1L << FLIP) | (1L << HUE) | (1L << SATURATION) | (1L << BRIGHTNESS) | (1L << ALPHA) | (1L << XSHIFT) | (1L << YSHIFT) | (1L << ZSHIFT) | (1L << SIZE) | (1L << SKEW))) != 0)) {
				{
				{
				State = 105; adjustment();
				}
				}
				State = 110;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdjustmentContext : ParserRuleContext {
		public Geom_adjustmentContext geom_adjustment() {
			return GetRuleContext<Geom_adjustmentContext>(0);
		}
		public Color_adjustmentContext color_adjustment() {
			return GetRuleContext<Color_adjustmentContext>(0);
		}
		public AdjustmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adjustment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterAdjustment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitAdjustment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdjustment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AdjustmentContext adjustment() {
		AdjustmentContext _localctx = new AdjustmentContext(Context, State);
		EnterRule(_localctx, 22, RULE_adjustment);
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ROTATE:
			case FLIP:
			case XSHIFT:
			case YSHIFT:
			case ZSHIFT:
			case SIZE:
			case SKEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 111; geom_adjustment();
				}
				break;
			case HUE:
			case SATURATION:
			case BRIGHTNESS:
			case ALPHA:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112; color_adjustment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Color_adjustmentsContext : ParserRuleContext {
		public Color_adjustmentsContext color_adjustments() {
			return GetRuleContext<Color_adjustmentsContext>(0);
		}
		public Color_adjustmentContext color_adjustment() {
			return GetRuleContext<Color_adjustmentContext>(0);
		}
		public Color_adjustmentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color_adjustments; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterColor_adjustments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitColor_adjustments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor_adjustments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Color_adjustmentsContext color_adjustments() {
		return color_adjustments(0);
	}

	private Color_adjustmentsContext color_adjustments(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Color_adjustmentsContext _localctx = new Color_adjustmentsContext(Context, _parentState);
		Color_adjustmentsContext _prevctx = _localctx;
		int _startState = 24;
		EnterRecursionRule(_localctx, 24, RULE_color_adjustments, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			}
			Context.Stop = TokenStream.LT(-1);
			State = 120;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Color_adjustmentsContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_color_adjustments);
					State = 116;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 117; color_adjustment();
					}
					} 
				}
				State = 122;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Geom_adjustmentContext : ParserRuleContext {
		public ITerminalNode XSHIFT() { return GetToken(CfdgParser.XSHIFT, 0); }
		public NumContext[] num() {
			return GetRuleContexts<NumContext>();
		}
		public NumContext num(int i) {
			return GetRuleContext<NumContext>(i);
		}
		public ITerminalNode YSHIFT() { return GetToken(CfdgParser.YSHIFT, 0); }
		public ITerminalNode ZSHIFT() { return GetToken(CfdgParser.ZSHIFT, 0); }
		public ITerminalNode ROTATE() { return GetToken(CfdgParser.ROTATE, 0); }
		public ITerminalNode SIZE() { return GetToken(CfdgParser.SIZE, 0); }
		public ITerminalNode SKEW() { return GetToken(CfdgParser.SKEW, 0); }
		public ITerminalNode FLIP() { return GetToken(CfdgParser.FLIP, 0); }
		public Geom_adjustmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geom_adjustment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterGeom_adjustment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitGeom_adjustment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGeom_adjustment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Geom_adjustmentContext geom_adjustment() {
		Geom_adjustmentContext _localctx = new Geom_adjustmentContext(Context, State);
		EnterRule(_localctx, 26, RULE_geom_adjustment);
		try {
			State = 148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,9,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(XSHIFT);
				State = 124; num();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; Match(YSHIFT);
				State = 126; num();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 127; Match(ZSHIFT);
				State = 128; num();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 129; Match(ROTATE);
				State = 130; num();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 131; Match(SIZE);
				State = 132; num();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 133; Match(SIZE);
				State = 134; num();
				State = 135; num();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 137; Match(SIZE);
				State = 138; num();
				State = 139; num();
				State = 140; num();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 142; Match(SKEW);
				State = 143; num();
				State = 144; num();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 146; Match(FLIP);
				State = 147; num();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Color_adjustmentContext : ParserRuleContext {
		public ITerminalNode HUE() { return GetToken(CfdgParser.HUE, 0); }
		public NumContext num() {
			return GetRuleContext<NumContext>(0);
		}
		public ITerminalNode SATURATION() { return GetToken(CfdgParser.SATURATION, 0); }
		public ITerminalNode BRIGHTNESS() { return GetToken(CfdgParser.BRIGHTNESS, 0); }
		public ITerminalNode ALPHA() { return GetToken(CfdgParser.ALPHA, 0); }
		public Color_adjustmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color_adjustment; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterColor_adjustment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitColor_adjustment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor_adjustment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Color_adjustmentContext color_adjustment() {
		Color_adjustmentContext _localctx = new Color_adjustmentContext(Context, State);
		EnterRule(_localctx, 28, RULE_color_adjustment);
		try {
			State = 158;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 150; Match(HUE);
				State = 151; num();
				}
				break;
			case SATURATION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 152; Match(SATURATION);
				State = 153; num();
				}
				break;
			case BRIGHTNESS:
				EnterOuterAlt(_localctx, 3);
				{
				State = 154; Match(BRIGHTNESS);
				State = 155; num();
				}
				break;
			case ALPHA:
				EnterOuterAlt(_localctx, 4);
				{
				State = 156; Match(ALPHA);
				State = 157; num();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(CfdgParser.NUMBER, 0); }
		public NumContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_num; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.EnterNum(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICfdgListener typedListener = listener as ICfdgListener;
			if (typedListener != null) typedListener.ExitNum(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICfdgVisitor<TResult> typedVisitor = visitor as ICfdgVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNum(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumContext num() {
		NumContext _localctx = new NumContext(Context, State);
		EnterRule(_localctx, 30, RULE_num);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 160; Match(NUMBER);
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 161; Match(T__5);
				State = 162; Match(NUMBER);
				}
				break;
			case T__6:
				EnterOuterAlt(_localctx, 3);
				{
				State = 163; Match(T__6);
				State = 164; Match(NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return statements_sempred((StatementsContext)_localctx, predIndex);
		case 12: return color_adjustments_sempred((Color_adjustmentsContext)_localctx, predIndex);
		}
		return true;
	}
	private bool statements_sempred(StatementsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool color_adjustments_sempred(Color_adjustmentsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1D', '\xAA', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', ')', '\n', '\x3', '\f', 
		'\x3', '\xE', '\x3', ',', '\v', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\x31', '\n', '\x4', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'H', '\n', '\a', '\x3', 
		'\b', '\a', '\b', 'K', '\n', '\b', '\f', '\b', '\xE', '\b', 'N', '\v', 
		'\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', ']', '\n', '\t', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 
		'j', '\n', '\v', '\x3', '\f', '\a', '\f', 'm', '\n', '\f', '\f', '\f', 
		'\xE', '\f', 'p', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', 't', 
		'\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 'y', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '|', '\v', '\xE', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', 
		'\x97', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', 
		'\x10', '\xA1', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\xA8', '\n', '\x11', '\x3', 
		'\x11', '\x2', '\x4', '\x4', '\x1A', '\x12', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\x2', '\x2', '\x2', '\xB1', '\x2', '\"', '\x3', '\x2', '\x2', 
		'\x2', '\x4', '%', '\x3', '\x2', '\x2', '\x2', '\x6', '\x30', '\x3', '\x2', 
		'\x2', '\x2', '\b', '\x32', '\x3', '\x2', '\x2', '\x2', '\n', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'G', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'L', '\x3', '\x2', '\x2', '\x2', '\x10', '\\', '\x3', '\x2', '\x2', '\x2', 
		'\x12', '^', '\x3', '\x2', '\x2', '\x2', '\x14', 'i', '\x3', '\x2', '\x2', 
		'\x2', '\x16', 'n', '\x3', '\x2', '\x2', '\x2', '\x18', 's', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', 'u', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x96', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\xA0', '\x3', '\x2', '\x2', '\x2', 
		' ', '\xA7', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x5', '\x4', '\x3', 
		'\x2', '#', '$', '\a', '\x2', '\x2', '\x3', '$', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '%', '*', '\b', '\x3', '\x1', '\x2', '&', '\'', '\f', '\x4', 
		'\x2', '\x2', '\'', ')', '\x5', '\x6', '\x4', '\x2', '(', '&', '\x3', 
		'\x2', '\x2', '\x2', ')', ',', '\x3', '\x2', '\x2', '\x2', '*', '(', '\x3', 
		'\x2', '\x2', '\x2', '*', '+', '\x3', '\x2', '\x2', '\x2', '+', '\x5', 
		'\x3', '\x2', '\x2', '\x2', ',', '*', '\x3', '\x2', '\x2', '\x2', '-', 
		'\x31', '\x5', '\b', '\x5', '\x2', '.', '\x31', '\x5', '\n', '\x6', '\x2', 
		'/', '\x31', '\x5', '\f', '\a', '\x2', '\x30', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '.', '\x3', '\x2', '\x2', '\x2', '\x30', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '\a', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\n', '\x2', '\x2', '\x33', '\x34', '\a', '\x19', '\x2', '\x2', 
		'\x34', '\t', '\x3', '\x2', '\x2', '\x2', '\x35', '\x36', '\a', '\v', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x3', '\x2', '\x2', '\x37', '\x38', 
		'\x5', '\x1A', '\xE', '\x2', '\x38', '\x39', '\a', '\x4', '\x2', '\x2', 
		'\x39', '\v', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\f', '\x2', 
		'\x2', ';', '<', '\a', '\x19', '\x2', '\x2', '<', '=', '\a', '\x3', '\x2', 
		'\x2', '=', '>', '\x5', '\xE', '\b', '\x2', '>', '?', '\a', '\x4', '\x2', 
		'\x2', '?', 'H', '\x3', '\x2', '\x2', '\x2', '@', '\x41', '\a', '\f', 
		'\x2', '\x2', '\x41', '\x42', '\a', '\x19', '\x2', '\x2', '\x42', '\x43', 
		'\x5', ' ', '\x11', '\x2', '\x43', '\x44', '\a', '\x3', '\x2', '\x2', 
		'\x44', '\x45', '\x5', '\xE', '\b', '\x2', '\x45', '\x46', '\a', '\x4', 
		'\x2', '\x2', '\x46', 'H', '\x3', '\x2', '\x2', '\x2', 'G', ':', '\x3', 
		'\x2', '\x2', '\x2', 'G', '@', '\x3', '\x2', '\x2', '\x2', 'H', '\r', 
		'\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x5', '\x10', '\t', '\x2', 'J', 
		'I', '\x3', '\x2', '\x2', '\x2', 'K', 'N', '\x3', '\x2', '\x2', '\x2', 
		'L', 'J', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', '\x2', 
		'M', '\xF', '\x3', '\x2', '\x2', '\x2', 'N', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'O', ']', '\x5', '\x12', '\n', '\x2', 'P', 'Q', '\a', '\x18', '\x2', 
		'\x2', 'Q', 'R', '\a', '\x5', '\x2', '\x2', 'R', 'S', '\x5', '\x14', '\v', 
		'\x2', 'S', 'T', '\x5', '\x12', '\n', '\x2', 'T', ']', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'V', '\a', '\x18', '\x2', '\x2', 'V', 'W', '\a', '\x5', '\x2', 
		'\x2', 'W', 'X', '\x5', '\x14', '\v', '\x2', 'X', 'Y', '\a', '\x3', '\x2', 
		'\x2', 'Y', 'Z', '\x5', '\xE', '\b', '\x2', 'Z', '[', '\a', '\x4', '\x2', 
		'\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', '\\', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\\', 'P', '\x3', '\x2', '\x2', '\x2', '\\', 'U', '\x3', 
		'\x2', '\x2', '\x2', ']', '\x11', '\x3', '\x2', '\x2', '\x2', '^', '_', 
		'\a', '\x19', '\x2', '\x2', '_', '`', '\x5', '\x14', '\v', '\x2', '`', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x61', '\x62', '\a', '\x3', '\x2', 
		'\x2', '\x62', '\x63', '\x5', '\x16', '\f', '\x2', '\x63', '\x64', '\a', 
		'\x4', '\x2', '\x2', '\x64', 'j', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x66', '\a', '\x6', '\x2', '\x2', '\x66', 'g', '\x5', '\x16', '\f', '\x2', 
		'g', 'h', '\a', '\a', '\x2', '\x2', 'h', 'j', '\x3', '\x2', '\x2', '\x2', 
		'i', '\x61', '\x3', '\x2', '\x2', '\x2', 'i', '\x65', '\x3', '\x2', '\x2', 
		'\x2', 'j', '\x15', '\x3', '\x2', '\x2', '\x2', 'k', 'm', '\x5', '\x18', 
		'\r', '\x2', 'l', 'k', '\x3', '\x2', '\x2', '\x2', 'm', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', '\x2', 'n', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'o', '\x17', '\x3', '\x2', '\x2', '\x2', 'p', 'n', '\x3', 
		'\x2', '\x2', '\x2', 'q', 't', '\x5', '\x1C', '\xF', '\x2', 'r', 't', 
		'\x5', '\x1E', '\x10', '\x2', 's', 'q', '\x3', '\x2', '\x2', '\x2', 's', 
		'r', '\x3', '\x2', '\x2', '\x2', 't', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'u', 'z', '\b', '\xE', '\x1', '\x2', 'v', 'w', '\f', '\x4', '\x2', '\x2', 
		'w', 'y', '\x5', '\x1E', '\x10', '\x2', 'x', 'v', '\x3', '\x2', '\x2', 
		'\x2', 'y', '|', '\x3', '\x2', '\x2', '\x2', 'z', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '|', 'z', '\x3', '\x2', '\x2', '\x2', '}', '~', '\a', '\x13', 
		'\x2', '\x2', '~', '\x97', '\x5', ' ', '\x11', '\x2', '\x7F', '\x80', 
		'\a', '\x14', '\x2', '\x2', '\x80', '\x97', '\x5', ' ', '\x11', '\x2', 
		'\x81', '\x82', '\a', '\x15', '\x2', '\x2', '\x82', '\x97', '\x5', ' ', 
		'\x11', '\x2', '\x83', '\x84', '\a', '\r', '\x2', '\x2', '\x84', '\x97', 
		'\x5', ' ', '\x11', '\x2', '\x85', '\x86', '\a', '\x16', '\x2', '\x2', 
		'\x86', '\x97', '\x5', ' ', '\x11', '\x2', '\x87', '\x88', '\a', '\x16', 
		'\x2', '\x2', '\x88', '\x89', '\x5', ' ', '\x11', '\x2', '\x89', '\x8A', 
		'\x5', ' ', '\x11', '\x2', '\x8A', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x8B', '\x8C', '\a', '\x16', '\x2', '\x2', '\x8C', '\x8D', '\x5', ' ', 
		'\x11', '\x2', '\x8D', '\x8E', '\x5', ' ', '\x11', '\x2', '\x8E', '\x8F', 
		'\x5', ' ', '\x11', '\x2', '\x8F', '\x97', '\x3', '\x2', '\x2', '\x2', 
		'\x90', '\x91', '\a', '\x17', '\x2', '\x2', '\x91', '\x92', '\x5', ' ', 
		'\x11', '\x2', '\x92', '\x93', '\x5', ' ', '\x11', '\x2', '\x93', '\x97', 
		'\x3', '\x2', '\x2', '\x2', '\x94', '\x95', '\a', '\xE', '\x2', '\x2', 
		'\x95', '\x97', '\x5', ' ', '\x11', '\x2', '\x96', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x96', '\x81', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x83', '\x3', '\x2', '\x2', '\x2', 
		'\x96', '\x85', '\x3', '\x2', '\x2', '\x2', '\x96', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x96', '\x90', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', '\x2', '\x2', 
		'\x97', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\a', '\xF', 
		'\x2', '\x2', '\x99', '\xA1', '\x5', ' ', '\x11', '\x2', '\x9A', '\x9B', 
		'\a', '\x10', '\x2', '\x2', '\x9B', '\xA1', '\x5', ' ', '\x11', '\x2', 
		'\x9C', '\x9D', '\a', '\x11', '\x2', '\x2', '\x9D', '\xA1', '\x5', ' ', 
		'\x11', '\x2', '\x9E', '\x9F', '\a', '\x12', '\x2', '\x2', '\x9F', '\xA1', 
		'\x5', ' ', '\x11', '\x2', '\xA0', '\x98', '\x3', '\x2', '\x2', '\x2', 
		'\xA0', '\x9A', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x9C', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x9E', '\x3', '\x2', '\x2', '\x2', '\xA1', '\x1F', 
		'\x3', '\x2', '\x2', '\x2', '\xA2', '\xA8', '\a', '\x18', '\x2', '\x2', 
		'\xA3', '\xA4', '\a', '\b', '\x2', '\x2', '\xA4', '\xA8', '\a', '\x18', 
		'\x2', '\x2', '\xA5', '\xA6', '\a', '\t', '\x2', '\x2', '\xA6', '\xA8', 
		'\a', '\x18', '\x2', '\x2', '\xA7', '\xA2', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA3', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xA5', '\x3', '\x2', 
		'\x2', '\x2', '\xA8', '!', '\x3', '\x2', '\x2', '\x2', '\xE', '*', '\x30', 
		'G', 'L', '\\', 'i', 'n', 's', 'z', '\x96', '\xA0', '\xA7',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
